---
date: 2020/09/05 21:46:00
update: 2020/09/05 21:46:00
---



# 0. 引言

本文中涉及到很多计算机网络的专有名词，例如datagram、fragments、endpoint等，笔者不会对其进行翻译，具体是什么意思见文末的名词解释。

# 1. 



# 2. IKE协议细节

IKE协议一般使用500端口，使用UDP协议，也可以使用4500端口，因为UDP是不可靠的datagram协议，IKE自己解决了传输过程的错误，包括包丢失，包重复和包伪造。IKE设计的目的是解决以下两个问题：

- 在超时前，所有重传包中至少有一个包到达目的地
- 不会出现传输链路中全是伪造或重传的包，导致阻塞网络或者耗尽节点的CPU

IKEv2消息很简单，他们的长度不是固定的，IKEv2自身没有切割大消息的机制。

>IP defines a mechanism for fragmentation of oversized UDP messages, but implementations vary in the maximum message size supported.  Furthermore, use of IP fragmentation opens an implementation to denial-of-service (DoS) attacks [[DOSUDPPROT]](https://www.rfc-editor.org/rfc/rfc7296.html#ref-DOSUDPPROT). Finally, some NAT and/or firewall implementations may block IP fragments.
>
>IP定义了切割UDP消息的机制，但是他的实现方式是多样的，此外，使用IP fragments会导致DOS攻击，最终导致NAT和防火墙被IP fragments 阻塞

所有的IKEv2协议的实现必须支持发送、接受、处理至少1280字节的IKE消息，必须支持发送、接受、处理至少3000字节的消息。IKEv2协议会被最大的UDP消息大小所影响，可以省略一些证书和加密套件来缩短消息，比如使用Hash或者URL格式来替换证书。

所有在4500端口的IKE消息必须用四个前导0开头。

<!-- more -->

## 2.1. 重传计时器(Retransmission Timers)

所有的IKE消息必须成对出现： 一个request对应一个response。建立了SA的IKE连接一般存在两个exchanges。一旦IKE的SA建立，任何一个endpoint在任何时间都可以发送一个request，每个消息都隶属于一个request或者一个response，对于任意一个exchange，一个endpoint为发送端，另一个endpoint为接受端

对于任意一对IKE消息，发送端需要在发生超时事件以后进行重传。接受端永远不会重传消息，除非他接收到重传的request，接收端必须记住每一个response，除非他收到了一个request，并且这个request的sequence number比response的sequence number加上window size还要大。（window size在2.3中介绍）为了节省内存，接收端允许忘记那些已经超时的response，如果接受端收到了已经忘记的response后重传的request，要么忽略，要么重新构造response。

IKE是可靠的协议，发送端必须重传request，除非他收到了正确的response或者SA过期。重传的request必须从IKE头开始按位相同，不包含IP头和UDP头哦。

## 2.2. 使用Sequence Numbers和Message Id

每个IKE消息都头中都有一部分是Message Id，这个Message Id用来匹配request和response，Message Id是32位的数，在IKE_SA_INIT消息中，这个值为0，Message id是递增的，因此IKE_AUTH消息的id为1，EAP消息的id为2

每个endpoint都维护两个message id，一个是下一个准备发送的request的message id，另一个是希望接收到的response的message id。

注意Message ID是加密保护并且防重放的，如果发生Message ID溢出了32位，则IKE SA需要重建。



## 2.3. Window Size for Overlapping Requests

窗口大小表明发送端有能力保持多个未完成的exchanges的状态，运行发送端在第一个response到达前发送多个request。在完成初始exchanges前，window size一直是1。

IKE端在发送后续消息前必须等待每一个消息的response，除非他接收到了对方的SET_WINDOW_SIZE消息增大窗口。



当IKE SA建立以后，一个IKE endpoint 可能在接受response前发出多个request，直到到达另一个endpoint的瓶颈，这些请求会在网络中传递，IKE endpoint在发送request前必须准备处理接收到的request，否则就是死锁了。（到底是什么意思？为什么会死锁？）



IKE endpoint 在发送request的时候必须保证不会超过另一个endpoint的window size，换句话说，如果接收端的window size是N，发送端想要发送X，发送端必须等待所有X-N的response被接受。IKE endpoint必须保存每一个request的拷贝，除非他接收到正确的reponse，必须保存和他窗口大小相同的最后几个response，预防response的丢失。

windows size大于1的端，应该有能力处理乱序的request，以最大化性能。

windows size只是一个属性，他与TCP中的拥塞控制（congestion control）无关，windows size只能增大，不能减小，除非IKE 的SA失效。

## 2.4. 状态同步和连接超时







# 3. IKEv2协议具体格式

## 3.1. IKE Header

```txt
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       IKE SA Initiator's SPI                  |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       IKE SA Responder's SPI                  |
   |                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Next Payload | MjVer | MnVer | Exchange Type |     Flags     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                          Message ID                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                            Length                             |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
```

注意到这里的IKE头，一行是32位(4字节), 其中`IKE SA Initiator's SPI`占用了两行，所以是8个字节。

|          字段          |    大小     |                             备注                             |
| :--------------------: | :---------: | :----------------------------------------------------------: |
| IKE SA Initiator's SPI | 64位，8字节 |                一个发送端用来鉴定IKE的SA的值                 |
| IKE SA Responder's SPI | 64位，8字节 |                一个接受端用来鉴定IKE的SA的值                 |
|      Next Payload      | 8位，1字节  |             表示紧跟在Header之后的payload的类型              |
|         MjVer          |     4位     |                           主版本号                           |
|         MnVer          |     4位     |                           次版本号                           |
|     Exchange Type      | 8位，1字节  |                        Exchange的类型                        |
|         Flags          | 8位，1字节  | `XXRVIXXX`<br />X代表这一位必须为0<br />R为0代表这是一个IKE响应，为1代表这是一个IKE请求<br />V为1代表发送端支持比当前主版本更高的IKE协议，0代表不能支持 |
|       Message ID       | 32位，4字节 |                       代表IKE消息的ID                        |
|         Length         | 32位，4字节 | 无符号数，代表IKE消息的长度（Header+所有Payloads），单位是字节 |

## 3.2. IKE Payload

### 3.2.1. IKE Payload Header

```txt
                        1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   | Next Payload  |C|  RESERVED   |         Payload Length        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
```

IKE Payload Header 一共32位，4字节



|      字段      |    大小     |                             备注                             |
| :------------: | :---------: | :----------------------------------------------------------: |
|  Next Payload  | 8位，1字节  |           表示紧跟在当前Payload之后的Payload的类型           |
|       C        |     1位     | Critical, 接受者在不理解当前Payload(不了解当前类型)的情况下，能否跳过当前Payload |
|    RESERVED    |     7位     |                         保留，全为0                          |
| Payload Length | 16位，2字节 |    无符号数，当前payload的长度（payload header+payload）     |











# # 0. 名词解释

|   名词    | 解释 |
| :-------: | :--: |
| datagram  |      |
| fragments |      |
| exchanges |      |
|    SA     |      |
| endpoint  |      |
|  request  |      |
| response  |      |




# 







